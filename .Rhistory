a
available.packages()
View(a)
find.package("devtools")
install.packages("KernSmooth")
library(KernSmooth)
rm(a)
rm(b)
rm(x,y)
getwd
getwd()
rm(b,x,y)
rm(b,x,y)
save()
x <- 4
class(x)
x <- 4.00
class(x)
x <- 4.5
class (x)
x <- -4.99
class(x)
x <- c(4,TRUE)
class(x)
x <- c(1,3,5)
y <- c(3,2,10)
cbind(x,y)
clear
help(clear)
??clear
x <- 1.000
class(x)
x <- list(1,"a")
x
x <- list(list(1,"a"), "b")
x
x <- list(2,"a","b", TRUE)
x[[2]]
x<-1:4
y<-2
x + y
x <- c(17,14,4)
x[x>10]==4
x[x>10]<-4
x
x <- c(17,14,3)
x[x>10]<-4
x
x[x>10]==4
x <- factor(c("a", "b", "a"))
x
table(x)
unclass(x)
attr(,"levels")
attr(x,"levels")
x <- factor(c("a","b","a"))
levels = c("b","a")
x
x <- factor(c("a","b","a"), levels = c("b","a"))
x
??read.table
install.packages("swirl")
packageVersion("swirl)
packageVersion("swirl")
packageVersion("swirl")
library(swirl)
rm(list=ls())
swirl()
5+7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/mysqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + C(0,10,100)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >=6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Susan")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
play()
paste("Hello","world")
paste(my_div)
paste(my_div, collapse = "|")
nxt()
paste(1:3,c("x","y","z"),sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
play()
y
nxt()
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
is.na(my_data)
my_na <- is.na(my_data)
print my_na
get(my_na)
print(my_na)
my_na
my == NA
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
play()
ls()
?delete
remove(ls())
??remove
remove(list = character())
remove(list = ls())
x
nxt()
x
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)]&x>0]
x[!is.na(x) & x > 0]
c(x[3], x[5], x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- names(vect)
names(vect2)
names(vect2) <- c(names(vect))
names(vect2)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
play()
dim(my_vector) <- c(1,10)
dim(my_vector) <- c(1,20)
attributes(my_vector)
class(my_vector)
my_vector
dim(my_vector) <- c(4,5)
nxt()
my_matrix <- my_vector
?matrix()
?matrix
matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_data)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_Data) <- cnames
colnames(my_data) <- cnames
my_data
getwd
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
inside.names(plant)
inside. names(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
exit()
nxt()
swirl()
head(flags)
play()
str(flags)
nxt()
dim(flags)
viewinfo()
class(flags)
play()
as.list(flags)
nxt()
cls_list <- lappply(flags,class)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
play()
as.list(cls_list)
nxt()
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
play()
length(flags$colours)
length(flags$orange)
nxt()
flags_colors <- flags[,11:17]
flag_colors <- flags[, 11:17]
head(flag_Colors, 6)
head(flag_colors, 6)
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean
sapply(flag_colors, mean)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(uniqu_Vals, length)
sapply(unique_Vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
swirl()
swirl()
sapply(flags,unique)
quit()
?read.table
?file
rm(list=ls)
ls
?rm
x <- c("a", "b", "c", "c", "a")
x[1]
[1:3]
x[1:3]
x[x>5]
x[x<5]
x[x>a]
x[x>"a"]
u <- x[x>"a"]
u
u <- x > "a"
u
x[u]
foo = 1:4
class(foo)
foo
?class
bar=0.6
$bar
x <- matrix(1:4, 2, 2)
x
?rep
y <- matrix(rep(10,4), 2, 2)
y
rep(10, times = 4)
rep( 1:4, times = 5)
rep( 1:4, each = 5)
rep(1:2, length.out = 2)
rep(1:2, length.out = 3)
x
y
x %*% y
?%*%
x * y
?'%*%'
x <-4
class(x)
x <- c(4, "a", TRUE)
x
class(x)
x <- c(1,3,5)
y <- c(3,2,10)
rbind(x,y)
x <- list(2, "a", "b", TRUE)
x
x[[2]]
x[2]
x[2:3]
x[[2:3]]
x <- 1:4
y <- 2:3
a = x + y
class(A)
class(a)
a
b <- c(3,5,5,7)
class(b)
b + 1
c <- b + 1
class(c)
c<- b + y
class(c)
class(a)
y
b <- (1:2)
b + y
c <- b + y
class(c)
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x>10] <-4
x
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x>10] == 4
x[x<10] == 4
x[x>10]
rm(list = ls)
ls
ls()
rm(list = ls())
read.table(hw1_data)
getwd()
file("hw1_data")
read.csv("hw1_data")
read.table("hw1_data")
file("hw1_data")
read.table("hw1_data")
con <- file("hw1_data")
con
open(con,"r")
data <- read.csv(con)
library(gdata)
?package
??package
install.packages("Per;")
install.packages("Perl")
library(XLConnect)
read.table("hw1_data")
getwd
rm(list = ls())
getwd
setwd("C:/Users/Susan/Documents")
getwd
debug(ls)
ls
library(datasets)
data(mtcars)
str(mtcars)
summary(mtcars)
str(str())
str(mtcars)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
str(mtcars)
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x['8'] - x['4']
x <- tapply(mtcars$hp, mtcars$cyl, mean)
head(x)
x
x <- subset(iris, Species == "virginica")$Sepal.Length
mean(x[!is.na(x)])
library(datasets)
data(iris)
x <- subset(iris, Species == "virginica")$Sepal.Length
mean(x[!is.na(x)])
apply(iris[, 1:4], 2, mean)
x <- subset(iris, Species == "virginica")$Sepal.Length
mean(x[!is.na(x)])
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(mtcars, 2, mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x['8'] - x['4']
getwd()
setwd("R")
list.files()
setwd(list.files[5])
list.files[5]
setwd("ProgrammingAssignment2")
list.files()
source(cachematrix.R)
source("cachematrix.R")
rm(list=ls())
source("cachematrix.R")
cacheSolve
makeCacheMatrix()
View(cacheSolve)
View(cacheSolve)
View(makeCacheMatrix)
View(cacheSolve)
x <- matrix(1:4, nrow=2, ncol=2)
m <- makeCacheMatrix(x)
s <- cacheSolve(m)
print(s)
x
m
m
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv_mat <<- NULL
set <- function(y){
x <<- y
inv_mat <<- NULL
}
get <- function()x
setinv <- function(inv) inv_mat <<- inv
getinv <- function() inv_mat
list(set = set, get = get, setinv = setinv, getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv_mat <- x$getinv()
if (!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
m <- solve(data,...)
x$setinv(inv_mat)
inv_mat
}
m <- makeCacheMatrix(x)
m
s <- cacheSolve(m)
s <- cacheSolve(m)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv_mat <- x$getinv()
if (!is.null(inv_mat)){
message("getting cached data")
return(inv_mat)
}
data <- x$get()
m <- solve(data,...)
x$setinv(inv_mat)
inv_mat
}
s <- cacheSolve(m)
s
x
x <- matrix(1:4, nrow=2, ncol=2)
m <- makeCacheMatrix(x)
s <- cacheSolve(m)
print(s)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv_mat <- x$getinv()
if (!is.null(inv_mat)){
message("getting cached data")
return(inv_mat)
}
data <- x$get()
inv_mat <- solve(data,...)
x$setinv(inv_mat)
inv_mat
}
s <- cacheSolve(m)
s
s2 <- cacheSolve(m)
print(s2)
